#! /usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import rospy
from tf.transformations import euler_from_quaternion
import rosbag
from tf_bag import BagTfTransformer                 # https://github.com/IFL-CAMP/tf_bag
import tensorflow
import cv2
from cv_bridge import CvBridge, CvBridgeError
import tf2_ros
import tf
import tf2_py as tf2
import warnings
warnings.filterwarnings("ignore")

def rosbag_to_tfrecord():
    rospy.init_node('rosbag_to_tfrecord')

    ################
    #  Parameters  #
    ################
    bag_file       = rospy.get_param("bag_file"       , "")
    output_dir     = rospy.get_param("output_dir"     , "") # Defaults to {bag_file}-TFRecord
    image_topic    = rospy.get_param("image_topic"    , "/camera/color/image_raw")
    dataset_name   = rospy.get_param("dataset_name"   , "train")
    images_per_bin = rospy.get_param("images_per_bin" , 100)
    tf_map         = rospy.get_param("tf_map"         , "map")
    tf_base_link   = rospy.get_param("tf_base_link"   , "base_link")

    # Check parameters
    if bag_file == "" or not os.path.exists(bag_file) or not os.path.isfile(bag_file):
        rospy.logerr("Specified bag does not exist (%s)" % bag_file)
        return

    if output_dir == "" or not os.path.exists(output_dir) or not os.path.isdir(output_dir):
        output_dir = os.path.abspath(bag_file).replace('.bag','') + "-TFRecord"
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        rospy.loginfo("Output directory set to %s" % output_dir)

    if image_topic == "":
        rospy.logerr("No image topic given. Use parameter image_topic.")
        return

    if tf_map == "" or tf_base_link == "":
        rospy.logerr("Please specify tf frame names.")
        return

    if dataset_name == "":
        rospy.logerr("Please specify a dataset_name.")
        return

    if images_per_bin < 1:
        rospy.logerr("images_per_bin has to be greater than 1.")
        return

    ################
    # Helper stuff #
    ################
    def _int64_feature(value):
        """Wrapper for inserting int64 features into Example proto."""
        if not isinstance(value, list):
            value = [value]
        return tensorflow.train.Feature(int64_list=tensorflow.train.Int64List(value=value))

    def _float_feature(value):
        """Wrapper for inserting float features into Example proto."""
        if not isinstance(value, list):
            value = [value]
        return tensorflow.train.Feature(float_list=tensorflow.train.FloatList(value=value))

    def _bytes_feature(value):
        """Wrapper for inserting bytes features into Example proto."""
        return tensorflow.train.Feature(bytes_list=tensorflow.train.BytesList(value=[value]))

    # Print iterations progress
    def print_progress(iteration, total, prefix='', suffix='', decimals=1, bar_length=50):
        """
        Call in a loop to create terminal progress bar
        @params:
            iteration   - Required  : current iteration (Int)
            total       - Required  : total iterations (Int)
            prefix      - Optional  : prefix string (Str)
            suffix      - Optional  : suffix string (Str)
            decimals    - Optional  : positive number of decimals in percent complete (Int)
            bar_length  - Optional  : character length of bar (Int)
        """
        str_format = "{0:." + str(decimals) + "f}"
        percents = str_format.format(100 * (iteration / float(total)))
        filled_length = int(round(bar_length * iteration / float(total)))
        bar = 'â–ˆ' * filled_length + '-' * (bar_length - filled_length)

        sys.stdout.write('\r%s |%s| %s%s %s' % (prefix, bar, percents, '%', suffix)),

        if iteration == total:
            sys.stdout.write('\n')
        sys.stdout.flush()

    # Used to convert image message to opencv image
    bridge = CvBridge()
    
    ################
    #     MAIN     #
    ################
    with rosbag.Bag(bag_file, "r") as bag:
        
        expected_im_count = bag.get_message_count(image_topic)

        number_of_bins = expected_im_count // images_per_bin

        total_count = 0
        total_saved_count = 0
        per_bin_count = 0
        skipped_count = 0
        tfWriter = None        

        colorspace = b'RGB'
        channels = 3

        print_progress(0, expected_im_count, prefix = 'Extracting transforms:')
        expected_tf_count = bag.get_message_count(["/tf", "/tf_static"])
        total_tf_count = 0
        tf_buffer = tf2_ros.Buffer(cache_time=rospy.Duration(bag.get_end_time() - bag.get_start_time()))
        for topic, msg, t in bag.read_messages(topics=["/tf", "/tf_static"]):
            for msg_tf in msg.transforms:
                if topic == '/tf_static':
                    tf_buffer.set_transform_static(msg_tf, "default_authority")
                else:
                    tf_buffer.set_transform(msg_tf, "default_authority")
            total_tf_count += 1
            print_progress(total_tf_count, expected_tf_count, prefix = 'Extracting transforms:', suffix = '(%i / %i)' % (total_tf_count, expected_tf_count))

        print_progress(0, expected_im_count, prefix = 'Writing TFRecord:     ')
        for topic, msg, t in bag.read_messages(topics=image_topic):
            total_count += 1
            
            # Get translation and orientation
            try:
                msg_tf = tf_buffer.lookup_transform(tf_map, tf_base_link, t, rospy.Duration(0.001))
                translation = msg_tf.transform.translation
                euler = euler_from_quaternion([msg_tf.transform.rotation.w, msg_tf.transform.rotation.x, msg_tf.transform.rotation.y, msg_tf.transform.rotation.z])
            except tf2.ExtrapolationException as e:
                skipped_count += 1
                # Print progress
                print_progress(total_count, expected_im_count, prefix = 'Writing TFRecord:     ', suffix = '(saved: %i, skipped: %i of total %i)' % (total_saved_count, skipped_count, expected_im_count))
                continue
            
            # Get the image
            try:
                cv_image = bridge.imgmsg_to_cv2(msg, "bgr8")
                _, encoded = cv2.imencode('.jpeg', cv_image)
            except CvBridgeError as e:
                rospy.logerr(e)
                skipped_count += 1
                # Print progress
                print_progress(total_count, expected_im_count, prefix = 'Writing TFRecord:     ', suffix = '(saved: %i, skipped: %i of total %i)' % (total_saved_count, skipped_count, expected_im_count))
                continue
            
            # Add image and position to TFRecord
            feature_dict = {
                'image/location/translation/x': _float_feature(translation.x),
                'image/location/translation/y': _float_feature(translation.y),
                'image/location/translation/z': _float_feature(translation.z),
                'image/location/rotation/x': _float_feature(euler[0]),
                'image/location/rotation/y': _float_feature(euler[1]),
                'image/location/rotation/z': _float_feature(euler[2]),
                'image/height': _int64_feature(msg.height),
                'image/width': _int64_feature(msg.width),
                'image/channels': _int64_feature(channels),
                'image/colorspace': _bytes_feature(colorspace),
                'image/format': _bytes_feature('jpeg'),
                'image/encoded': _bytes_feature(encoded.tobytes())
            }

            example = tensorflow.train.Example(features=tensorflow.train.Features(feature=feature_dict))
            
            # Create a new writer if we need one
            if not tfWriter or per_bin_count >= images_per_bin:
                if tfWriter:
                    tfWriter.close()
                bin_number = total_saved_count // images_per_bin + 1
                output_filename = '%s-%.5d-of-%.5d' % (dataset_name, bin_number, number_of_bins)
                output_file = os.path.join(output_dir, output_filename)
                tfWriter = tensorflow.io.TFRecordWriter(output_file)
                per_bin_count = 0

            tfWriter.write(example.SerializeToString())
            per_bin_count += 1
            total_saved_count += 1
            
            # Print progress
            print_progress(total_count, expected_im_count, prefix = 'Writing TFRecord:     ', suffix = '(saved: %i, skipped: %i of total %i)' % (total_saved_count, skipped_count, expected_im_count))

        if tfWriter:
            tfWriter.close()

if __name__ == '__main__':
    try:
        rosbag_to_tfrecord()
    except rospy.ROSInterruptException: pass